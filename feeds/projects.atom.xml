<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Adrian Karcevski - Projects</title><link href="/" rel="alternate"></link><link href="/feeds/projects.atom.xml" rel="self"></link><id>/</id><updated>2018-10-14T19:47:00-04:00</updated><entry><title>Writing a Password Cracker in Python</title><link href="/writing-a-password-cracker-in-python.html" rel="alternate"></link><published>2018-10-14T19:47:00-04:00</published><updated>2018-10-14T19:47:00-04:00</updated><author><name>Adrian Karcevski</name></author><id>tag:None,2018-10-14:/writing-a-password-cracker-in-python.html</id><summary type="html">&lt;p&gt;Accessing someone's email is worse than stealing their diary. Your primary email is the key to your digital kingdom. If an attacker gains access to it, hacking your other accounts becomes trivial. So if you haven't already, enable 2-factor authentication and set a half-decent password.&lt;/p&gt;
&lt;p&gt;Now, with the PSA out …&lt;/p&gt;</summary><content type="html">&lt;p&gt;Accessing someone's email is worse than stealing their diary. Your primary email is the key to your digital kingdom. If an attacker gains access to it, hacking your other accounts becomes trivial. So if you haven't already, enable 2-factor authentication and set a half-decent password.&lt;/p&gt;
&lt;p&gt;Now, with the PSA out of the way, on to the main course. Cracking someone's password is easy, anyone can do it! I don't recommend nor endorse you doing so, but it really is as simple as running a sub-50 line script. I'll be showing you how to write a bare-bones password cracker, more accurately a dictionary attack, in the form of a Python script. We will be attempting to crack some account passwords in the &amp;quot;/etc/shadow&amp;quot; file on a Linux installation.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /etc/shadow
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;The basic idea is simple. We will be comparing the password hashes in our &amp;quot;/etc/shadow&amp;quot; file with a pre-defined dictionary of commonly used passwords. The words in the dictionary will be hashed using the same algorithm that our passwords used when they were created. If the dictionary word's hashed value is the same as the one in our &amp;quot;/etc/shadow&amp;quot; file, we have a match.&lt;/p&gt;
&lt;p&gt;Using passlib, lets briefly go over the properties of a hash.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ pip install passlib
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;A hash is a number generated from a string of text.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;passlib.hash&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sha512_crypt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt;
&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="k"&gt;class&lt;/span&gt; &lt;span class="err"&gt;&amp;#39;&lt;/span&gt;&lt;span class="nc"&gt;passlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;handlers&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha2_crypt&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;sha512_crypt&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&amp;gt;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;$6$rounds=656000$kY5bRqtzT48sjg9i$aZmL1aeH3PbGVPKwBmMh/yCo7.Y1hKFyY93EnDVBYCWvlmF0TUG44V2DYhyXw89n4oz65VLzBHi2xpN4Orct4/&amp;#39;&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# SHA512: ${identifier}${rounds}${salt}${text}&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# read more @ https://passlib.readthedocs.io/en/stable/modular_crypt_format.html&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Its generated by a formula in such a way that it is extremely unlikely that some other text will produce the same hash value. &lt;a class="reference external" href="https://www.webopedia.com/TERM/H/hashing.html"&gt;[¹]&lt;/a&gt;&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="c1"&gt;# the 1st argument is being hashed and compared against the 2nd argument&lt;/span&gt;
&lt;span class="o"&gt;...&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;password&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;True&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p@ssword&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="bp"&gt;False&lt;/span&gt;
&lt;span class="o"&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;sha512&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;p@ssword&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
&lt;span class="s1"&gt;&amp;#39;$6$rounds=656000$PGPyAbJ/HNgNZpYQ$0BLtuPST.2AjmLgCCSSZ5LrScEC9F2BqrBLE25m2OtShG81tXEaiwUth99.7pbPkJCqdlDlpzjtPNe1OC7HEG1&amp;#39;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Thus, it is infeasible to generate a message from its hash value except by trying all possible messages. &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cryptographic_hash_function"&gt;[²]&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;For our purposes, thats really all you need to know about hashing. Below is the code for the password cracker. I plan on breaking it down step-by-step at a future date, but for now you'll just have to read it as is.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&lt;span class="kn"&gt;import&lt;/span&gt; &lt;span class="nn"&gt;passlib.hash&lt;/span&gt;


&lt;span class="n"&gt;fields&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;{&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;*&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;!&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;}&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;testPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# iterates through the supplied dictionary and compares values to the given hash.&lt;/span&gt;
    &lt;span class="nb"&gt;hash&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="nb"&gt;getattr&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;passlib&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;hash&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;sha512_crypt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;rockyou.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;encoding&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;utf8&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;errors&lt;/span&gt;&lt;span class="o"&gt;=&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;replace&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt; &lt;span class="c1"&gt;# the dictionary&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;plaintext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;strip&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="nb"&gt;hash&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;verify&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[+] Found Password: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;plaintext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;

        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;[-] Password Not Found.&amp;#39;&lt;/span&gt;

&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="c1"&gt;# filters out locked and disabled accounts.&lt;/span&gt;
    &lt;span class="n"&gt;field&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
    &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="n"&gt;field&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
            &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;[-] Disabled or locked account.&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;

    &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="bp"&gt;True&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
    &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
        &lt;span class="n"&gt;user&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;split&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;:&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)[&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;&lt;span class="p"&gt;]&lt;/span&gt;
        &lt;span class="k"&gt;return&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;


&lt;span class="k"&gt;def&lt;/span&gt; &lt;span class="nf"&gt;main&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
    &lt;span class="c1"&gt;# iterates through the provided /etc/shadow file.&lt;/span&gt;
    &lt;span class="c1"&gt;# parses, validates, and then tests hashes against dictionary.&lt;/span&gt;
    &lt;span class="k"&gt;with&lt;/span&gt; &lt;span class="nb"&gt;open&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;passwords.txt&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;  &lt;span class="c1"&gt;# /etc/shadow&lt;/span&gt;
        &lt;span class="k"&gt;for&lt;/span&gt; &lt;span class="n"&gt;line&lt;/span&gt; &lt;span class="ow"&gt;in&lt;/span&gt; &lt;span class="n"&gt;f&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;readlines&lt;/span&gt;&lt;span class="p"&gt;():&lt;/span&gt;
            &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="bp"&gt;None&lt;/span&gt;
            &lt;span class="k"&gt;try&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;ciphertext&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;parse&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;line&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;except&lt;/span&gt; &lt;span class="ne"&gt;TypeError&lt;/span&gt; &lt;span class="k"&gt;as&lt;/span&gt; &lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;e&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
            &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="n"&gt;validate&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;fields&lt;/span&gt;&lt;span class="p"&gt;):&lt;/span&gt;
                &lt;span class="n"&gt;result&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="n"&gt;testPass&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;ciphertext&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;
                &lt;span class="k"&gt;print&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="s1"&gt;&amp;#39;{} for User: {}&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;format&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;result&lt;/span&gt;&lt;span class="p"&gt;,&lt;/span&gt; &lt;span class="n"&gt;user&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt;


&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="vm"&gt;__name__&lt;/span&gt; &lt;span class="o"&gt;==&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;__main__&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;:&lt;/span&gt;
    &lt;span class="n"&gt;main&lt;/span&gt;&lt;span class="p"&gt;()&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Populate your &amp;quot;passwords.txt&amp;quot; file. WARNING: Do this on a VM and remove sudoers from the list.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ sudo cat /etc/shadow &amp;gt; ~/&amp;lt;project&amp;gt;/passwords.txt
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Our dictionary of choice will be &amp;quot;rockyou.txt&amp;quot; but feel free to use another or generate your own.&lt;/p&gt;
&lt;img alt="" src="/images/rockyou.png" /&gt;
&lt;p&gt;Sources:
[1] &lt;a class="reference external" href="https://www.webopedia.com/TERM/H/hashing.html"&gt;https://www.webopedia.com/TERM/H/hashing.html&lt;/a&gt;
[2] &lt;a class="reference external" href="https://en.wikipedia.org/wiki/Cryptographic_hash_function"&gt;https://en.wikipedia.org/wiki/Cryptographic_hash_function&lt;/a&gt;&lt;/p&gt;
</content><category term="python"></category><category term="passlib"></category></entry><entry><title>Hosting a Pelican Website on Github</title><link href="/hosting-a-pelican-website-on-github.html" rel="alternate"></link><published>2018-09-22T16:38:00-04:00</published><updated>2018-09-22T16:38:00-04:00</updated><author><name>Adrian Karcevski</name></author><id>tag:None,2018-09-22:/hosting-a-pelican-website-on-github.html</id><summary type="html">&lt;p&gt;In my search to find a fast and affordable method for creating this blog, I stumbled upon &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator written in Python. I'll be showing you how to configure Pelican in conjunction with &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; to host your webpage.&lt;/p&gt;
&lt;p&gt;You will need a Github account, a basic …&lt;/p&gt;</summary><content type="html">&lt;p&gt;In my search to find a fast and affordable method for creating this blog, I stumbled upon &lt;a class="reference external" href="https://blog.getpelican.com/"&gt;Pelican&lt;/a&gt;, a static site generator written in Python. I'll be showing you how to configure Pelican in conjunction with &lt;a class="reference external" href="https://pages.github.com/"&gt;Github Pages&lt;/a&gt; to host your webpage.&lt;/p&gt;
&lt;p&gt;You will need a Github account, a basic understanding of Git, and should be familiar with creating Python virtual environments.&lt;/p&gt;
&lt;p&gt;Pelican will generate .html files to be served by Github Pages. In order to do this we'll need one location for storing our &amp;quot;source&amp;quot; files and another location for our output files i.e. the actual webpage. We will be using two seperate branches within one repository to make this happen.&lt;/p&gt;
&lt;p&gt;First create the repository where our project will live.&lt;/p&gt;
&lt;img alt="" src="/images/create-repo.png" /&gt;
&lt;p&gt;Next clone the repository to create a new directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git clone https://github.com/&amp;lt;your_name&amp;gt;/&amp;lt;your_name&amp;gt;.github.io.git
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Change to the new directory.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ cd &amp;lt;your_name&amp;gt;.github.io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;As mentioned above we will need a place to store our &amp;quot;source&amp;quot; files i.e. configuration files, Makefile, virtual environment, and content folder. We will do this by creating a new branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ git checkout -b source
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now create the virtual environment and activate it. If you're using Python3, Pelican requires version 3.3 or above.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ virtualenv --python=python3.6 venv
$ source venv/bin/activate
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Inside the virtual environment, install Pelican and the required dependencies.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ pip install pelican markdown ghp-import
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Afterwards, we can create our &amp;quot;source&amp;quot; files using pelican-quickstart&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ pelican-quickstart
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;You will be prompted a series of questions in order to setup the pelicanconf.py file.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;&amp;gt; Where do you want to create your new web site? [.] ./
&amp;gt; What will be the title of this web site? Adrian Karcevski
&amp;gt; Who will be the author of this web site? Adrian Karcevski
&amp;gt; What will be the default language of this web site? [pt] en
&amp;gt; Do you want to specify a URL prefix? e.g., http://example.com   (Y/n) n
&amp;gt; Do you want to enable article pagination? (Y/n) y
&amp;gt; How many articles per page do you want? [10] 10
&amp;gt; What is your time zone? [Europe/Paris] America/New_York
&amp;gt; Do you want to generate a Fabfile/Makefile to automate generation and publishing? (Y/n) Y
&amp;gt; Do you want an auto-reload &amp;amp; simpleHTTP script to assist with theme and site development? (Y/n) n
&amp;gt; Do you want to upload your website using FTP? (y/N) n
&amp;gt; Do you want to upload your website using SSH? (y/N) n
&amp;gt; Do you want to upload your website using Dropbox? (y/N) n
&amp;gt; Do you want to upload your website using S3? (y/N) n
&amp;gt; Do you want to upload your website using Rackspace Cloud Files? (y/N) n
&amp;gt; Do you want to upload your website using GitHub Pages? (y/N) y
&amp;gt; Is this your personal page (username.github.io)? (y/N) y
Done. Your new project is available at /home/&amp;lt;your_name&amp;gt;/&amp;lt;your_name&amp;gt;.github.io
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Once you've completed the prompt, run ls command and make sure you see the following files.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;$ ls
content     Makefile  pelicanconf.py  __pycache__  venv
fabfile.py  output    publishconf.py  README.md
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now, in the content folder, create a sample content file in Markdown (.md) format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ touch sample.md
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open the file you just created in your text editor and add the following:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Title: Hosting a static site using Pelican and Git
Date: 2018-09-22 16:38
Category: Projects
Tags: python, pelican, github, git
Slug: post-1
Authors: Adrian Karcevski

GasdknjbnGajksnbkjlFSfjkn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Alternatively you can use the reStructuredText (.rst) format.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ touch sample.rst
&lt;/pre&gt;&lt;/div&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;Hosting a static site using Pelican and Git
#####################################################
:date: 2018-09-22 16:38
:category: Projects
:tags: python, pelican, github, git
:authors: Adrian Karcevski

GasdknjbnGajksnbkjlFSfjkn
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;To see what it looks like we need to make the .html files and serve them.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ make html &amp;amp;&amp;amp; serve html
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Open your browser and go to localhost:8000 to see what it looks like. You should now see your webpage.&lt;/p&gt;
&lt;p&gt;Finally lets make some last changes with git before we commit and push the code to our remote repository.&lt;/p&gt;
&lt;p&gt;By creating a .gitignore file git will ignore the output folder when pushing to the source branch. Then we will reload the staging area to ensure .gitignore works properly. If you setup a .gitignore when you made the repository, you can omit the reload.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ echo output &amp;gt; .gitignore
(venv)$ git rm -rf --cached .
(venv)$ git add .
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Now we can commit the changes and push them to our remote repositorie's source branch.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ git commit -a -m &amp;#39;intial commit&amp;#39; &amp;amp;&amp;amp; git push origin source
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Github Pages requires a gh-pages branch which is where our files will be served from. The following command will use ghp-import to accomplish this step.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span&gt;&lt;/span&gt;(venv)$ make github
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;Congratulations, you've just created a webpage on Github Pages. You should see your content when you visit &amp;lt;your_name&amp;gt;.github.io&lt;/p&gt;
</content><category term="python"></category><category term="pelican"></category><category term="github"></category><category term="git"></category></entry></feed>