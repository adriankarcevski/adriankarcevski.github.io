Writing a Password Cracker in Python
#####################################################
:date: 2018-10-14 19:47
:category: Projects
:tags: python, passlib
:authors: Adrian Karcevski


Accessing someone's email is worse than stealing their diary. Your primary email is the key to your digital kingdom. If an attacker gains access to it, hacking your other accounts becomes trivial. So if you haven't already, enable 2-factor authentication and set a half-decent password. 

Now, with the PSA out of the way, on to the main course. Cracking someone's password is easy, anyone can do it! I don't recommend nor endorse you doing so, but it really is as simple as running a sub-50 line script. I'll be showing you how to write a bare-bones password cracker, more accurately a dictionary attack, in the form of a Python script. We will be attempting to crack some account passwords in the "/etc/shadow" file on a Linux installation.

.. code-block:: text

    $ sudo cat /etc/shadow

The basic idea is simple. We will be comparing the password hashes in our "/etc/shadow" file with a pre-defined dictionary of commonly used passwords. The words in the dictionary will be hashed using the same algorithm that our passwords used when they were created. If the dictionary word's hashed value is the same as the one in our "/etc/shadow" file, we have a match.

Using passlib, lets briefly go over the properties of a hash.

.. code-block:: text 

    $ pip install passlib

A hash is a number generated from a string of text. 

.. code-block:: python 

    >>> import passlib.hash
    >>> sha512 = getattr(passlib.hash, 'sha512_crypt')
    >>> sha512
    <class 'passlib.handlers.sha2_crypt.sha512_crypt'>
    >>> ciphertext = sha512.hash('password')
    >>> ciphertext
    '$6$rounds=656000$kY5bRqtzT48sjg9i$aZmL1aeH3PbGVPKwBmMh/yCo7.Y1hKFyY93EnDVBYCWvlmF0TUG44V2DYhyXw89n4oz65VLzBHi2xpN4Orct4/'
    >>> # SHA512: ${identifier}${rounds}${salt}${text} 
    >>> # read more @ https://passlib.readthedocs.io/en/stable/modular_crypt_format.html
    
Its generated by a formula in such a way that it is extremely unlikely that some other text will produce the same hash value. `[¹] <https://www.webopedia.com/TERM/H/hashing.html>`_

.. code-block:: python 

    >>> # the 1st argument is being hashed and compared against the 2nd argument
    ...
    >>> sha512.verify('password', ciphertext)
    True
    >>> sha512.verify('p@ssword', ciphertext)
    False
    >>> sha512.hash('p@ssword')
    '$6$rounds=656000$PGPyAbJ/HNgNZpYQ$0BLtuPST.2AjmLgCCSSZ5LrScEC9F2BqrBLE25m2OtShG81tXEaiwUth99.7pbPkJCqdlDlpzjtPNe1OC7HEG1'

Thus, it is infeasible to generate a message from its hash value except by trying all possible messages. `[²] <https://en.wikipedia.org/wiki/Cryptographic_hash_function>`_


For our purposes, thats really all you need to know about hashing. Below is the code for the password cracker. I plan on breaking it down step-by-step at a future date, but for now you'll just have to read it as is. 


.. code-block:: python 

    import passlib.hash 


    fields = {'*', '!'}

    def testPass(ciphertext):
        # iterates through the supplied dictionary and compares values to the given hash.
        hash = getattr(passlib.hash, 'sha512_crypt')
        with open('rockyou.txt', encoding='utf8', errors='replace') as f: # the dictionary
            for line in f.readlines():
                plaintext = line.strip('\n')
                if hash.verify(plaintext, ciphertext):
                    return '[+] Found Password: {}'.format(plaintext) 
                
            return '[-] Password Not Found.' 

    def validate(ciphertext, fields):
        # filters out locked and disabled accounts.
        field = ciphertext.split(':')[0]
        for f in fields:
            if f == field:
                print('[-] Disabled or locked account.')
                return False
            
        return True
            

    def parse(line):
        if ':' in line:
            user = line.split(':')[0]
            ciphertext = line.split(':')[1]
            return (user, ciphertext)


    def main():
        # iterates through the provided /etc/shadow file.
        # parses, validates, and then tests hashes against dictionary.
        with open('passwords.txt') as f:  # /etc/shadow 
            for line in f.readlines():
                user, ciphertext = None, None
                try:
                    user, ciphertext = parse(line)
                except TypeError as e:
                    print(e)
                if validate(ciphertext, fields):
                    result = testPass(ciphertext)
                    print('{} for User: {}'.format(result, user))
                    

    if __name__ == '__main__':
        main()

Populate your "passwords.txt" file. WARNING: Do this on a VM and remove sudoers from the list.

.. code-block:: text 

    $ sudo cat /etc/shadow > ~/<project>/passwords.txt

Our dictionary of choice will be "rockyou.txt" but feel free to use another or generate your own.

.. image:: /images/rockyou.png

Sources:
[1] https://www.webopedia.com/TERM/H/hashing.html
[2] https://en.wikipedia.org/wiki/Cryptographic_hash_function

